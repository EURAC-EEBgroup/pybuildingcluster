[tox]
envlist = py38,py39,py310,py311,py312,flake8,mypy,black,docs,coverage
minversion = 3.8.0
isolated_build = true

[gh-actions]
python = 
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps = 
    pytest>=6.0
    pytest-cov>=2.10
    pytest-xdist>=2.4
    pytest-mock>=3.6
    numpy>=1.21.0
    pandas>=1.3.0
    scikit-learn>=1.0.0
    xgboost>=1.5.0
    lightgbm>=3.2.0
    optuna>=3.0.0
    matplotlib>=3.5.0
    seaborn>=0.11.0
    joblib>=1.1.0
commands = 
    pytest {posargs:tests} --cov=geoclustering --cov-report=term-missing --cov-report=xml

[testenv:flake8]
deps = 
    flake8>=3.8
    flake8-docstrings>=1.6
    flake8-import-order>=0.18
    flake8-black>=0.2
commands = 
    flake8 geoclustering tests

[testenv:black]
deps = 
    black>=21.0
commands = 
    black --check --diff geoclustering tests

[testenv:black-format]
deps = 
    black>=21.0
commands = 
    black geoclustering tests

[testenv:mypy]
deps = 
    mypy>=0.800
    types-requests
    pandas-stubs
commands = 
    mypy geoclustering

[testenv:docs]
deps = 
    sphinx>=4.0
    sphinx-rtd-theme>=1.0
    sphinxcontrib-napoleon>=0.7
    myst-parser>=0.15
changedir = docs
commands = 
    sphinx-build -W -b html . _build/html

[testenv:docs-serve]
deps = 
    sphinx>=4.0
    sphinx-rtd-theme>=1.0
    sphinx-autobuild>=2021.3.14
changedir = docs
commands = 
    sphinx-autobuild . _build/html --host 0.0.0.0 --port 8000

[testenv:coverage]
deps = 
    pytest>=6.0
    pytest-cov>=2.10
    coverage[toml]>=5.5
commands = 
    pytest --cov=geoclustering --cov-report=html --cov-report=term
    coverage report --fail-under=80

[testenv:integration]
deps = 
    {[testenv]deps}
    requests>=2.25.0
commands = 
    pytest {posargs:tests/integration} -v

[testenv:performance]
deps = 
    {[testenv]deps}
    pytest-benchmark>=3.4
commands = 
    pytest {posargs:tests/performance} --benchmark-only

[testenv:security]
deps = 
    bandit[toml]>=1.7
    safety>=1.10
commands = 
    bandit -r geoclustering
    safety check

[testenv:lint]
deps = 
    {[testenv:flake8]deps}
    {[testenv:black]deps}
    {[testenv:mypy]deps}
commands = 
    {[testenv:flake8]commands}
    {[testenv:black]commands}
    {[testenv:mypy]commands}

[testenv:format]
deps = 
    black>=21.0
    isort>=5.0
commands = 
    black geoclustering tests
    isort geoclustering tests

[testenv:clean]
deps = 
skip_install = true
commands = 
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('geoclustering.egg-info', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"

[testenv:build]
deps = 
    build>=0.7
    twine>=3.0
commands = 
    python -m build
    twine check dist/*

[testenv:publish-test]
deps = 
    twine>=3.0
commands = 
    twine upload --repository testpypi dist/*

[testenv:publish]
deps = 
    twine>=3.0
commands = 
    twine upload dist/*

# Flake8 configuration
[flake8]
max-line-length = 88
extend-ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    E402,  # module level import not at top of file
    F401,  # imported but unused (handled by mypy)
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    docs,
    .venv,
    venv
per-file-ignores = 
    __init__.py:F401
    tests/*:D100,D101,D102,D103,D104
import-order-style = google
application-import-names = geoclustering

# Coverage configuration
[coverage:run]
source = geoclustering
omit = 
    */tests/*
    */test_*
    setup.py
    */venv/*
    */.tox/*

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

# MyPy configuration
[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True
ignore_missing_imports = True

[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False

[mypy-sklearn.*]
ignore_missing_imports = True

[mypy-xgboost.*]
ignore_missing_imports = True

[mypy-lightgbm.*]
ignore_missing_imports = True

[mypy-optuna.*]
ignore_missing_imports = True

[mypy-matplotlib.*]
ignore_missing_imports = True

[mypy-seaborn.*]
ignore_missing_imports = True

[mypy-joblib.*]
ignore_missing_imports = True

# Pytest configuration
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
markers = 
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    performance: marks tests as performance tests
    unit: marks tests as unit tests
filterwarnings = 
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sklearn.*
    ignore::UserWarning:xgboost.*
    ignore::UserWarning:lightgbm.*